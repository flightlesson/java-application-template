#! /bin/bash
myname=$(echo $0 | sed 's|.*/||')
mydir=$(dirname $0 | sed 's|/$||')
jarfilebasename=myapp # jar file's name matches $jarfilebasename*.jar
mainclass=com.demo.myapp.MyApp
TRUNK=../

function usage() {
    cat <<- xxx
	Usage: $myname [+h] [+v] [+noop] <application-args>

	Runs the $jarfilebasename application.

	+h - print this message and stop. To see the application's
	     help message use '-h'.
	+v - print the java command before invocation.
	+noop - don't actually invoke the java command.
        +jar - print the path to the jar file and exit.

	These environment variables are used to alter behavior:
	JAVA - identifies the java command
	MYAPPJAR - identifies the jar file
	EXTRACLASSPATH - for example: extra1.jar:extra2.jar
	xxx
    exit
}

[ -z "$JAVA" ] &&  JAVA=$(which java)

# The jarfile's name and location might be different during development and after installation;
# this script should work unaltered either way.
# Test a specific jar file by placing it in the current working directory.
# During development the jar file is under "$(TRUNK)/maven-build-artifacts" (my preference) or "target" (maven's default).
# After installation the jar file is in the same directory as this script.
function findJarFile() for c in ./$jarfilebasename*.jar \
                                ${TRUNK}maven-build-artifacts/$jarfilebasename/$jarfilebasename-*-with-dependencies.jar \
                                target/$jarfilebasename-*-with-dependencies.jar \
                                $mydir/$jarfilebasename*.jar; do
                         [ -r $c ] && echo $c && return
                       done
[ -z "$MYAPPJAR" ] && MYAPPJAR=$(findJarFile || echo "did-not-find-the-jar-file")

verbose=
noop=
while [ -n "$1" ]; do
  case "$1" in
    +h) usage ;;
    +v) verbose=verbose ;;
    +noop) noop=noop; verbose=noop ;;
    +jar) echo $MYAPPJAR; exit 0 ;;
    +main) mainclass=`shift`;;
    *)  break ;;
  esac
  shift
done

if [ ! -r "$MYAPPJAR" ]; then
  echo "Couldn't find the jar file!"
  usage
fi

# Gotta do tricks to handle command line args that contain space chars.
cmd="$JAVA -cp $EXTRACLASSPATH:$MYAPPJAR $mainclass"
for x in "$@"; do cmd+=" \"$x\""; done

[ -z "$verbose" ] || echo $cmd
[ -z "$noop" ] && eval $cmd
